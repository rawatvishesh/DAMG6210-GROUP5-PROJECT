-------------------PACKAGE-----------------------
create or replace view available_inventory 
as
    WITH td AS (
    SELECT
        m.product_id,
        m.product_name,
        m.category_id,
        m.quantity,
        m.product_price,
        c.order_quantity       sold_quantity
    FROM
             product m
        INNER JOIN orders_product c ON m.PRODUCT_ID = c.product_id
)
SELECT distinct
    td.product_id,
    td.product_name,
    td.category_id,
    td.quantity,
    td.product_price,
    nvl(td.sold_quantity,0) as sold_quantity,    
    td.quantity - nvl(td.sold_quantity,0) AS available_quantity
FROM
    Td

--execute seperately
 
 create or replace FUNCTION get_available_qty (
        i_item_name VARCHAR
    ) RETURN NUMBER IS
        v_avail_qty NUMBER;
    BEGIN
        SELECT
            available_quantity
        INTO v_avail_qty
        FROM
            available_inventory
        WHERE
            lower(product_name) = lower(i_item_name);

        RETURN v_avail_qty;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN -1;
    END get_available_qty;
    
    
    --execute seperately


create or replace PROCEDURE place_order (
        i_item_name     VARCHAR,
        i_order_qty     NUMBER,
        o_order_number  OUT  NUMBER
    ) IS
        ex_insufficient_inventory EXCEPTION;
        v_available_qty  NUMBER;
        v_item_no        NUMBER;
        v_total_price number;
    BEGIN
--check if we have inventory before placing order
        SELECT
            product_id
        INTO v_item_no
        FROM
            available_inventory
        WHERE
            lower(product_name) = lower(i_item_name);
          SELECT
            available_inventory.product_price * i_order_qty 
        INTO v_total_price
        FROM
            available_inventory
        WHERE
            lower(product_name) = lower(i_item_name);

        v_available_qty := get_available_qty(i_item_name);
        IF v_available_qty >= i_order_qty THEN
            INSERT INTO orders_product (
                product_id,
                order_id,
                order_quantity,
                total_price
            ) VALUES (
                product_id_seq.NEXTVAL,
                order_id_seq.nextval,
                i_order_qty,
                v_total_price
            );

            o_order_number := order_id_seq.currval;
            COMMIT;
        ELSE
            RAISE ex_insufficient_inventory;
        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('invalid item name. plase send a valid item name as specified in inventory list');
        WHEN ex_insufficient_inventory THEN
            dbms_output.put_line('Item stock is not available OR it is less than ordered quantity');
    END place_order;




set serveroutput on
DECLARE
amount NUMBER;
BEGIN
place_order('Iron',1, amount);
dbms_output.put_line(amount);
END;



-------------------------LOGIN PROCEDURE--------------------------------
create or replace procedure login (
    i_email varchar,
    i_pswd varchar
    )
IS
    invalid_credentials exception;
BEGIN
    select email_id into i_email from customers where emial_id = i_email;
    select CUST_PASSWORD into i_pswd from customers where emial_id = i_email;
    if 
    i_email is not null and i_pswd is not null
    then 
    dbms_output.put_line('Login Successfull')
--    else
--    raise invalid_credentials;
    end if;
when no_data_found then
    raise invalid_credentials;
end;
exception
when invalid_credentials THEN
            dbms_output.put_line('Invalid Credentials');
end login;






-----------------------FETCH CARD DETAILS--------------------------
create or replace procedure fetch_card_details (
        i_fname varchar2,
        i_lname varchar2
    )  is
        v_card_no number;
        v_card_type varchar2(50);
        v_id number;
    BEGIN
    select customer_id into v_id from customers where lower(first_name)=lower(i_fname) and lower(last_name)=lower(i_lname);
        SELECT card_no 
        INTO v_card_no
        FROM
            card_detail
        WHERE
        customer_id = v_id;
        SELECT card_type 
        INTO v_card_type
        FROM
            card_detail
        WHERE
        customer_id = v_id;       
       dbms_output.put_line(v_card_no);
       dbms_output.put_line(v_card_type);
    EXCEPTION
        WHEN others THEN
          dbms_output.put_line('name doesnot exists');
    END;
