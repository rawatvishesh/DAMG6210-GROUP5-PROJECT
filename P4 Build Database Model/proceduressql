-----------------------INSERT CUSTOMER PROCEDURE--------------------

set serveroutput on
Create or replace procedure insert_customer (
cust_first_name  Customers.first_name%type,
cust_last_name   Customers.last_name%type,
Cust_email       Customers.email_id%type,
cust_contact     Customers.contact_no%type,
cust_username    Customers.user_name%type,
cust_password    Customers.cust_password%type
)
is
begin
    Insert into Customers (First_name, Last_name, Email_id, Contact_no, User_name, Cust_password) 
    values (cust_first_name,cust_last_name,Cust_email,cust_contact,cust_username,cust_password);
commit;
end;
/

execute insert_customer ('Sam','Stuart','Sam.s@gmail.com',9874651328, 'Sam.s','Sam@123');


select * from customers;

------------------------INSERT PROCEDURE---------------------
set serveroutput on
create or replace procedure insert_product(
i_name Product.Product_name%type,
I_category  Product_category.Category_id%type,
i_warehouse_id warehouse.Warehouse_id%type,
i_quantity   product.quantity%type,
i_price product.product_price%type,
i_manu_date   product.Manufacturing_date%type,
i_exp_date    product.Expiry_date%type)
is
begin
    
    INSERT INTO Product (Product_name, Category_id, Warehouse_id, Quantity, Product_price, Manufacturing_date, Expiry_date) 
    values (i_name, I_category, i_warehouse_id, i_quantity, i_price, i_manu_date,i_exp_date);
Commit;
end;
/

execute insert_product('Nike',4,3,2,150,to_date('Jan-26-2022', 'mm-dd-yyyy'),null);

select * from product;


----------------------------INSERT PROCEDURE------------------------------
set serveroutput on
create or replace procedure insert_subscription(
u_subscription_id  subscription_detail.subscription_id%type,
u_subscription_type     subscription_detail.subscription_type%type,
u_discount              subscription_detail.discount%type)
is
begin
update subscription_detail 
set subscription_type = u_subscription_type, discount = u_discount
where subscription_id = u_subscription_id;
commit;
end;
/

execute insert_subscription(2, 'Ruby',0.4);

SELECT * FROM SUBSCRIPTION_DETAIL;

--------------------DELETE PROCEDURE--------------------------
set serveroutput on
create or replace procedure d_customers(
d_first_name      customers.first_name%type
)
is
begin
delete from customers where first_name = d_first_name;
end;
/

execute d_customers('Sam');

Select * from customers;


-------------------------LOGIN PROCEDURE--------------------------------
create or replace procedure login (
    i_email varchar,
    i_pswd varchar
    )
IS
    invalid_credentials exception;
BEGIN
    select email_id into i_email from customers where emial_id = i_email;
    select CUST_PASSWORD into i_pswd from customers where emial_id = i_email;
    if 
    i_email is not null and i_pswd is not null
    then 
    dbms_output.put_line('Login Successfull')
--    else
--    raise invalid_credentials;
    end if;
when no_data_found then
    raise invalid_credentials;
end;
exception
when invalid_credentials THEN
            dbms_output.put_line('Invalid Credentials');
end login;






-----------------------FETCH CARD DETAILS--------------------------
create or replace procedure fetch_card_details (
        i_fname varchar2,
        i_lname varchar2
    )  is
        v_card_no number;
        v_card_type varchar2(50);
        v_id number;
    BEGIN
    select customer_id into v_id from customers where lower(first_name)=lower(i_fname) and lower(last_name)=lower(i_lname);
        SELECT card_no 
        INTO v_card_no
        FROM
            card_detail
        WHERE
        customer_id = v_id;
        SELECT card_type 
        INTO v_card_type
        FROM
            card_detail
        WHERE
        customer_id = v_id;       
       dbms_output.put_line(v_card_no);
       dbms_output.put_line(v_card_type);
    EXCEPTION
        WHEN others THEN
          dbms_output.put_line('name doesnot exists');
    END;
